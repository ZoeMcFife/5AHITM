{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ZoeMcFife/5AHITM/blob/main/INSY/Colab/%232025-01-07%23/bias-and-variance\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ugm8D4JUatJT"
      },
      "source": [
        "Bias/variance and model selection in depth\n",
        "==========================================\n",
        "\n",
        "*This is based on the course of [Fraida Fund](https://colab.research.google.com/github/ffund/ml-notebooks/blob/master/notebooks/1-colab-tour.ipynb) for  NYU Tandon School of Engineering*"
      ],
      "id": "ugm8D4JUatJT"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KyvyM2_4atJV"
      },
      "source": [
        "#### Attribution\n",
        "\n",
        "Parts of this notebook borrow from, or are inspired by, the following sources:\n",
        "\n",
        "-   The Introduction section is based on [Hyperparameters and Model Validation](https://jakevdp.github.io/PythonDataScienceHandbook/05.03-hyperparameters-and-model-validation.html), in the Python Data Science Handbook by Jake VanderPlas\n",
        "-   The section on polynomial models is based on [the model order selection demo notebook](https://colab.research.google.com/github/sdrangan/introml/blob/master/unit04_model_sel/demo_polyfit.ipynb) by Prof. Sundeep Rangan, and some of the text in that section is copied from that notebook.\n",
        "-   The section on uninformative features is based on [Cross Validation: The Right and Wrong Way](http://nbviewer.ipython.org/urls/raw.github.com/cs109/content/master/lec_10_cross_val.ipynb) from [Harvard CS109 Data Science](https://github.com/cs109/content)\n",
        "-   The simulation plots are based on the `scikit-learn` example [Single estimator versus bagging: bias-variance decomposition](https://scikit-learn.org/stable/auto_examples/ensemble/plot_bias_variance.html#sphx-glr-auto-examples-ensemble-plot-bias-variance-py)"
      ],
      "id": "KyvyM2_4atJV"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wNMLahr7atJV"
      },
      "source": [
        "Introduction\n",
        "------------\n",
        "\n",
        "As a distinguished machine learning expert, you are hired as a consultant to solve a difficult problem for a client. You apply the best <sup>\\[1\\]</sup> machine learning model you know, and present the results to the client. The response?\n",
        "\n",
        "> Not good enough! We expect much better performance.\n",
        "\n",
        "As a machine learning expert, what should you do to improve your results?\n",
        "\n",
        "-   Find and correct a problem with the data (garbage in, garbage out!)\n",
        "-   Find and correct a problem with the model implementation/training\n",
        "-   Use a more complicated model (more flexible)\n",
        "-   Use a less complicated model (less flexible)\n",
        "-   Get more training samples\n",
        "-   Get more data to add features to each sample - for example, you could join two related datasets to get more potentially predictive features\n",
        "-   Add additional features using transformed versions of the features you already have\n",
        "\n",
        "Each of these possible solutions has the potential to improve results, or to have no effect. In some cases, they can actually make the performance even worse.\n",
        "\n",
        "How do you know which one to try?\n",
        "\n",
        "<small>\\[1\\] There is actually no “best” machine learning model in general - various models will perform better on different problems.</small>"
      ],
      "id": "wNMLahr7atJV"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RnBI1R0FatJW"
      },
      "source": [
        "Your first instinct may be to try all of these potential solutions, and see which one improves performance. But that could be very expensive -\n",
        "\n",
        "-   Your time costs \\$ (you are getting paid for consulting on this problem!)\n",
        "-   You may need to use metered computing resources to train the model, which costs \\$\n",
        "-   Collecting data, especially labeled data, often costs \\$\n",
        "-   Your client is losing \\$ due to using a sub-optimal model in production while waiting for you to improve it"
      ],
      "id": "RnBI1R0FatJW"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jZORGwrDatJX"
      },
      "source": [
        "As a machine learning expert, your knowledge of the theoretical basics of machine learning, and your ability to *connect that knowledge* to practical solutions for real problems, should prepare you for this moment."
      ],
      "id": "jZORGwrDatJX"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vaPTL4f5atJY"
      },
      "source": [
        "Our previous work in this course has prepared us to evaluate some of these “next steps” to see whether they would be appropriate.\n",
        "\n",
        "**Find and correct a problem with the data (garbage in, garbage out!)**:\n",
        "\n",
        "-   We practiced using exploratory data analysis as a first step toward identifying problems or wrong assumptions related to the data.\n",
        "-   We also saw that when using models with good *interpretability*, we can inspect the fitted model as another step toward finding problems with the data. For example, in a case study on linear regression, we saw that the coefficients for certain features were high when common sense dictated that those features should not have any effect on the target variable.\n",
        "\n",
        "**Find and correct a problem with the model implementation/training**:\n",
        "\n",
        "-   We looked at, and will continue to look at, some problems that can arise with model training, for example learning rate too high/too low in gradient descent.\n",
        "\n",
        "**Get more data to add features to each sample**:\n",
        "\n",
        "-   We practiced inspecting the residuals. Plots of residuals against $y$ or against each of the features are a good way to see a 2D view of the results of the model, even when the dimension of the data is large.\n",
        "-   When there appears to be a pattern in the residuals, this indicates something “learnable” in the data that isn’t captured by our model.\n",
        "    -   For example, suppose we find that the residuals appear to be a function of $y$, but not of any feature $x$. This suggests that $y$ is partly a function of a “missing” feature, which we should try to identify (using domain knowledge) and add to our model.\n",
        "    -   Similarly, if the residuals appear to be a function of a feature $x$ that is in our data, but we are not using to train the model, we should absolutely add that feature to our model.\n",
        "-   Another thing to look for in a residuals plot: “outliers” or extreme values. These can sometimes indicate problems with the data,such as samples affected by measurement or recording error. (In this case, you might want to exclude these samples, and also figure out how to exclude them in production.) These can also indicate that the data is drawn from two distributions, where samples from the minority distribution appear as outliers. (In this case, you wouldn’t want to exclude these samples. You would want to add a feature to help you distinguish between the two populations, and then re-train your model with the added feature.)\n",
        "\n",
        "**Add additional features using transformed versions of the features you already have**:\n",
        "\n",
        "-   If the plot of residuals against a feature $x$ appears to have a non-linear pattern, we should consider adding a transformed version of that feature to our model."
      ],
      "id": "vaPTL4f5atJY"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "77w-bq2OatJY"
      },
      "source": [
        "It’s a good start. But to help us identify whether some of the other steps would be helpful, we need to understand *bias* and *variance*. Then, we’ll be on our way towards understanding when to:\n",
        "\n",
        "-   Use a more complicated model (more flexible)\n",
        "-   Use a less complicated model (less flexible)\n",
        "-   Get more training samples"
      ],
      "id": "77w-bq2OatJY"
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "NuglkWr6atJZ"
      },
      "outputs": [],
      "source": [
        "from sklearn import datasets\n",
        "from sklearn import metrics\n",
        "from sklearn import preprocessing\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.model_selection import train_test_split, KFold\n",
        "\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "sns.set()\n",
        "\n",
        "from IPython.core.interactiveshell import InteractiveShell\n",
        "InteractiveShell.ast_node_interactivity = \"all\""
      ],
      "id": "NuglkWr6atJZ"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vIX4Hmm7atJZ"
      },
      "source": [
        "Overfitting and underfitting: Polynomial data\n",
        "---------------------------------------------"
      ],
      "id": "vIX4Hmm7atJZ"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VJnl0DGkatJa"
      },
      "source": [
        "To illustrate the concept of overfitting, we will consider data generated by a polynomial of order $d$, with some added Gaussian noise:\n",
        "\n",
        "$$y_i = w_0 + w_1 x_{1} + \\cdots + w_d x_{i}^d + \\epsilon $$\n",
        "\n",
        "where $\\epsilon_i \\sim N(0, \\sigma^2)$.\n",
        "\n",
        "We can fit this model using a linear basis function regression."
      ],
      "id": "VJnl0DGkatJa"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qFi_Eh3LatJb"
      },
      "source": [
        "Here is a function that generates polynomial data:"
      ],
      "id": "qFi_Eh3LatJb"
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "rEnffboGatJb"
      },
      "outputs": [],
      "source": [
        "def generate_polynomial_regression_data(n=100, xrange=[-1,1], coefs=[1,0.5,0,2], sigma=0.5):\n",
        "  x = np.random.uniform(xrange[0], xrange[1], n)\n",
        "  y = np.polynomial.polynomial.polyval(x,coefs) + sigma * np.random.randn(n)\n",
        "\n",
        "  return x.reshape(-1,1), y"
      ],
      "id": "rEnffboGatJb"
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "VJ4Qdbg_atJc"
      },
      "outputs": [],
      "source": [
        "coefs=[1,0.5,0,2]\n",
        "n_samples = 100\n",
        "sigma = 0.5"
      ],
      "id": "VJ4Qdbg_atJc"
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "Q6Xa7GkcatJc"
      },
      "outputs": [],
      "source": [
        "x_test, y_test = generate_polynomial_regression_data(n=n_samples, coefs=coefs, sigma=sigma)\n",
        "x_train, y_train = generate_polynomial_regression_data(n=n_samples, coefs=coefs, sigma=sigma)"
      ],
      "id": "Q6Xa7GkcatJc"
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "ImthqhLfatJd",
        "outputId": "6c4e460b-e0c7-4d66-bf14-377efbbfa23b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.scatterplot(x=x_test.squeeze(), y=y_test, label='Test points');\n",
        "plt.xlabel(\"x\");\n",
        "plt.ylabel(\"y\");\n",
        "plt.title(\"Data generated from $1 + 0.5x + 2x^3$\");"
      ],
      "id": "ImthqhLfatJd"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HdYoDgb2atJd"
      },
      "source": [
        "In this case, since the data is generated synthetically, we know the “true” function that generated the data. We can plot this function along with the data:"
      ],
      "id": "HdYoDgb2atJd"
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "0GNVSxbTatJd",
        "outputId": "2e5b6dc3-686a-4821-f4b4-f79d408789dd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.scatterplot(x=x_test.squeeze(), y=y_test, label='Test points');\n",
        "plt.xlabel(\"x\");\n",
        "plt.ylabel(\"y\");\n",
        "plt.title(\"Data generated from $1 + 0.5x + 2x^3$\");\n",
        "\n",
        "# Plot true function\n",
        "x_p = np.linspace(-1,1,100);\n",
        "y_p = np.polynomial.polynomial.polyval(x_p, coefs);\n",
        "sns.lineplot(x=x_p,y=y_p, color='red', label='True function');"
      ],
      "id": "0GNVSxbTatJd"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fWCsEPSVatJd"
      },
      "source": [
        "We can use “transformed” features to fit a linear regression to this data."
      ],
      "id": "fWCsEPSVatJd"
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "PpzgXAZtatJe",
        "outputId": "e5347782-128d-4bd0-a6b8-ae2cec41cb11",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(100, 3)\n"
          ]
        }
      ],
      "source": [
        "x_train_d3 = np.column_stack( [x_train**d for d in np.arange(1,4)])\n",
        "print(x_train_d3.shape)"
      ],
      "id": "PpzgXAZtatJe"
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "zBa2VXGqatJe"
      },
      "outputs": [],
      "source": [
        "reg_poly3 = LinearRegression().fit(x_train_d3,y_train)"
      ],
      "id": "zBa2VXGqatJe"
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "tvOfgTk-atJe",
        "outputId": "1da1e3f6-9c82-4ba4-eb80-f6101a95a69d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0384423363639468\n",
            "[ 0.2150687  -0.06387114  2.41044787]\n"
          ]
        }
      ],
      "source": [
        "print(reg_poly3.intercept_)\n",
        "print(reg_poly3.coef_)"
      ],
      "id": "tvOfgTk-atJe"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4j_dw2-LatJe"
      },
      "source": [
        "That’s pretty good."
      ],
      "id": "4j_dw2-LatJe"
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "pbe18E0FatJe",
        "outputId": "85471ec4-cd96-4582-ba76-64d06c9a169e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.scatterplot(x=x_test.squeeze(), y=y_test, label='Test points');\n",
        "plt.xlabel(\"x\");\n",
        "plt.ylabel(\"y\");\n",
        "plt.title(\"Data generated from $1 + 0.5x + 2x^3$\");\n",
        "\n",
        "# Plot true function\n",
        "x_p = np.linspace(-1,1,100);\n",
        "y_p = np.polynomial.polynomial.polyval(x_p, coefs);\n",
        "sns.lineplot(x=x_p,y=y_p, color='red', label='True function');\n",
        "\n",
        "# Plot fitted function\n",
        "x_p = np.linspace(-1,1,100);\n",
        "x_p_d3 = np.column_stack( [x_p.reshape(-1,1)**d for d in np.arange(1,4)])\n",
        "y_p = reg_poly3.predict(x_p_d3);\n",
        "sns.lineplot(x=x_p, y=y_p, color='green', label='Model with d=3');"
      ],
      "id": "pbe18E0FatJe"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ApB2d_yvatJf"
      },
      "source": [
        "We can compute the error on the training set and on the test set:"
      ],
      "id": "ApB2d_yvatJf"
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "TJZzgVi0atJf",
        "outputId": "95d18eed-750f-42f6-c5a2-d61500d4fd4c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.2517295515903008"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "mse_poly3_train = metrics.mean_squared_error(y_train, reg_poly3.predict(x_train_d3))\n",
        "mse_poly3_train"
      ],
      "id": "TJZzgVi0atJf"
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "zDV_op1VatJg",
        "outputId": "e0bc2c5f-cb36-4b0b-b4f6-196e9989d7eb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.2801094786004811"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "x_test_d3 = np.column_stack( [x_test**d for d in np.arange(1,4)])\n",
        "mse_poly3 = metrics.mean_squared_error(y_test, reg_poly3.predict(x_test_d3))\n",
        "mse_poly3"
      ],
      "id": "zDV_op1VatJg"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hLN4KJllatJg"
      },
      "source": [
        "In general, though, we don’t know the “true” model order."
      ],
      "id": "hLN4KJllatJg"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n3HJWZDbatJg"
      },
      "source": [
        "Suppose we try fitting a linear regression (using transformed features) to this model, starting with $d=1$."
      ],
      "id": "n3HJWZDbatJg"
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "CUMji3YIatJg"
      },
      "outputs": [],
      "source": [
        "reg_poly1 = LinearRegression().fit(x_train,y_train)"
      ],
      "id": "CUMji3YIatJg"
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "A5drMRpuatJg",
        "outputId": "ed3ad3ab-a64a-416f-b526-94d12bcc8906",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.scatterplot(x=x_test.squeeze(), y=y_test, label='Test points');\n",
        "plt.xlabel(\"x\");\n",
        "plt.ylabel(\"y\");\n",
        "plt.title(\"Data generated from $1 + 0.5x + 2x^3$\");\n",
        "\n",
        "# Plot true function\n",
        "x_p = np.linspace(-1,1,100);\n",
        "y_p = np.polynomial.polynomial.polyval(x_p, coefs);\n",
        "sns.lineplot(x=x_p,y=y_p, color='red', label='True function');\n",
        "\n",
        "# Plot fitted function\n",
        "x_p = np.linspace(-1,1,100);\n",
        "y_p = reg_poly1.predict(x_p.reshape(-1,1));\n",
        "sns.lineplot(x=x_p, y=y_p, color='green', label='Model with d=1');"
      ],
      "id": "A5drMRpuatJg"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "USWPxkP9atJg"
      },
      "source": [
        "This is an example of *under-fitting* or *under-modeling*. The estimated function is not able to capture the complexity of the relation between $x$ and $y$ - it is not flexible enough.\n",
        "\n",
        "We can compute the error of this model, too:"
      ],
      "id": "USWPxkP9atJg"
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "EeoTJqLeatJg",
        "outputId": "b7794466-158a-4ada-ccf0-c17d5c0cd642",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.38199920991583286"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "mse_poly1_train = metrics.mean_squared_error(y_train, reg_poly1.predict(x_train))\n",
        "mse_poly1_train"
      ],
      "id": "EeoTJqLeatJg"
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "eioHjEnXatJg",
        "outputId": "e7383140-27d9-491c-b4d3-15de89edb246",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.34976876793929135"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "mse_poly1 = metrics.mean_squared_error(y_test, reg_poly1.predict(x_test))\n",
        "mse_poly1"
      ],
      "id": "eioHjEnXatJg"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pxJIuiS6atJg"
      },
      "source": [
        "It has higher error than the model with $d=3$, which is what we expected."
      ],
      "id": "pxJIuiS6atJg"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9JCFQ4onatJg"
      },
      "source": [
        "Now suppose that we tried a model order that was too high, say $d=10$."
      ],
      "id": "9JCFQ4onatJg"
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "2J6i_sB0atJg",
        "outputId": "5e1b030c-019e-4bab-fe67-5a94667d8bfe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(100, 10)\n"
          ]
        }
      ],
      "source": [
        "x_train_d10 = np.column_stack( [x_train**d for d in np.arange(1,11)])\n",
        "print(x_train_d10.shape)"
      ],
      "id": "2J6i_sB0atJg"
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "IqBpRhpyatJh"
      },
      "outputs": [],
      "source": [
        "reg_poly10 = LinearRegression().fit(x_train_d10,y_train)"
      ],
      "id": "IqBpRhpyatJh"
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "QkoHbgmOatJh",
        "outputId": "330018a7-d119-46f5-e4e4-f8336a60624c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.scatterplot(x=x_test.squeeze(), y=y_test, label='Test points');\n",
        "plt.xlabel(\"x\");\n",
        "plt.ylabel(\"y\");\n",
        "plt.title(\"Data generated from $1 + 0.5x + 2x^3$\");\n",
        "\n",
        "# Plot true function\n",
        "x_p = np.linspace(-1,1,100);\n",
        "y_p = np.polynomial.polynomial.polyval(x_p, coefs);\n",
        "sns.lineplot(x=x_p,y=y_p, color='red', label='True function');\n",
        "\n",
        "# Plot fitted function\n",
        "x_p = np.linspace(-1,1,100)\n",
        "x_p_d10 = np.column_stack( [x_p.reshape(-1,1)**d for d in np.arange(1,11)])\n",
        "y_p = reg_poly10.predict(x_p_d10);\n",
        "sns.lineplot(x=x_p, y=y_p, color='green', label='Model with d=10');"
      ],
      "id": "QkoHbgmOatJh"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V4805fWtatJh"
      },
      "source": [
        "The test error of this model is higher than the “true” model order, too. But, the training error is smaller!"
      ],
      "id": "V4805fWtatJh"
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "9DQ8w6t5atJh",
        "outputId": "230a09fc-4744-4e94-c86c-8d08b0f3cd02",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.23874488057161575"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "mse_poly10_train = metrics.mean_squared_error(y_train, reg_poly10.predict(x_train_d10))\n",
        "mse_poly10_train"
      ],
      "id": "9DQ8w6t5atJh"
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "YkXle26fatJi",
        "outputId": "a1fe4480-97f6-4235-af1f-6699744b7aa1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.28611052147066995"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "x_test_d10 = np.column_stack( [x_test**d for d in np.arange(1,11)])\n",
        "mse_poly10 = metrics.mean_squared_error(y_test, reg_poly10.predict(x_test_d10))\n",
        "mse_poly10"
      ],
      "id": "YkXle26fatJi"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RON9P72CatJi"
      },
      "source": [
        "This is called *over-fitting* or *over-modeling*. Because the model is very flexible, it is fitting the noise in the data and not the underlying relationship $y=t(x)$."
      ],
      "id": "RON9P72CatJi"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I-kfOdNsatJi"
      },
      "source": [
        "When we compare the estimated function with the true function we can see the overfitting and underfitting clearly. But, in a real problem, we would not have access to the true function (otherwise, we wouldn’t need to be estimating it). The question then is if we can determine the correct model order from data.\n",
        "\n",
        "This problem is known as the *model order selection* problem."
      ],
      "id": "I-kfOdNsatJi"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G3l1kO4RatJi"
      },
      "source": [
        "One (bad) idea is for each model order to measure the MSE on the training data and select $d$ that minimizes the MSE. To do this, the code below loops over a model order `d = 1,2,...,14` and for each model order, fits a model and measures the MSE."
      ],
      "id": "G3l1kO4RatJi"
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "ytyB32XWatJi"
      },
      "outputs": [],
      "source": [
        "dtest_list = np.arange(1,20)\n",
        "mse_tr = np.zeros(len(dtest_list))\n",
        "mse_test = np.zeros(len(dtest_list))\n",
        "\n",
        "\n",
        "for didx, dtest in enumerate(dtest_list):\n",
        "\n",
        "    # get transformed features\n",
        "    x_train_dtest = np.column_stack( [x_train**d for d in np.arange(1,(dtest+1))])\n",
        "    x_test_dtest = np.column_stack( [x_test**d for d in np.arange(1,(dtest+1))])\n",
        "\n",
        "    # fit data\n",
        "    reg_dtest = LinearRegression().fit(x_train_dtest,y_train)\n",
        "\n",
        "    # measure MSE on training data\n",
        "    y_hat = reg_dtest.predict(x_train_dtest)\n",
        "    mse_tr[didx] = metrics.mean_squared_error(y_train, y_hat)\n",
        "\n",
        "    # measure MSE on test data\n",
        "    y_hat_test = reg_dtest.predict(x_test_dtest)\n",
        "    mse_test[didx] = metrics.mean_squared_error(y_test, y_hat_test)"
      ],
      "id": "ytyB32XWatJi"
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "ImzUJoyXatJj",
        "outputId": "42d84d52-c480-47fd-9a93-ea0b88d6c0b1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.lineplot(x=dtest_list,y=mse_tr, marker=\"o\", label=\"Training\");\n",
        "sns.lineplot(x=dtest_list,y=mse_test, marker=\"o\", label=\"Test\");\n",
        "plt.xlabel('Model order');\n",
        "plt.ylabel('MSE');"
      ],
      "id": "ImzUJoyXatJj"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-hIiPiOzatJj"
      },
      "source": [
        "As we increase $d$, the training MSE always decreases. So minimizing MSE on the training data leads to selecting a very high $d$ which in turn results in over-fitting.\n",
        "\n",
        "On the test data, we observe that the test MSE is high at first (due to high bias), then decreases, then increases again (due to high variance). The model with the smallest MSE on this particular test set may or may not be the model that best reflects the true relationship. (The performance on this test set is still subject to the random draw of samples in the test set!)"
      ],
      "id": "-hIiPiOzatJj"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KKsUXuGAatJj"
      },
      "source": [
        "Overfitting and underfitting: uninformative features\n",
        "----------------------------------------------------"
      ],
      "id": "KKsUXuGAatJj"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AdZ6WWEOatJk"
      },
      "source": [
        "Overfitting and underfitting can occur even with a “regular” linear regression on the original features."
      ],
      "id": "AdZ6WWEOatJk"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sDHHtGAGatJk"
      },
      "source": [
        "In a previous lesson, we introduced a Python function that generates data using\n",
        "\n",
        "$$y_i = w_0 + w_1 x_{i,1} + \\ldots + w_d x_{i,d} + \\epsilon_i $$\n",
        "\n",
        "where $\\epsilon_i \\sim N(0, \\sigma^2)$."
      ],
      "id": "sDHHtGAGatJk"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lG6Qo_DhatJk"
      },
      "source": [
        "Now, we will introduce a slight variation on this function: we will add the ability to include *uninformative* features. These features are not related to the target variable $y$."
      ],
      "id": "lG6Qo_DhatJk"
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "MSN_1Fd-atJk"
      },
      "outputs": [],
      "source": [
        "def generate_linear_regression_data(n=100, d=1, coef=[5], intercept=1, sigma=0, uninformative=0):\n",
        "  x = np.random.uniform(-1,1,size=(n,d-uninformative))\n",
        "  y = (np.dot(x, coef) + intercept).squeeze() + sigma * np.random.randn(n)\n",
        "  if uninformative:\n",
        "    x = np.column_stack((x, np.random.randn(n,uninformative)))\n",
        "\n",
        "  return x, y"
      ],
      "id": "MSN_1Fd-atJk"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5My3POgDatJk"
      },
      "source": [
        "For example, let’s generate some data with 2 informative features (with some noise), and 2 uninformative features:"
      ],
      "id": "5My3POgDatJk"
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "jhf3_2wzatJl"
      },
      "outputs": [],
      "source": [
        "x, y = generate_linear_regression_data(n=100, d=4, coef=[5,5], intercept=1, sigma=1, uninformative=2)"
      ],
      "id": "jhf3_2wzatJl"
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "NR9e7To0atJl",
        "outputId": "9de88c92-4a30-4b9b-8ca5-79a7236bd564",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "x.shape"
      ],
      "id": "NR9e7To0atJl"
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "GAGlnND_atJl",
        "outputId": "1db65979-a1c1-4c97-aef8-5086a85abcdf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 858
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "p = plt.figure(figsize=(10,10));\n",
        "for i in range(4):\n",
        "  p = plt.subplot(2,2,i+1);\n",
        "  p = plt.scatter(x[:,i],  y);\n",
        "  p = plt.xlabel(\"x\" + str(i+1));\n",
        "  p = plt.ylabel(\"y\");"
      ],
      "id": "GAGlnND_atJl"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZDc7yFY7atJl"
      },
      "source": [
        "Once we fit a linear regression model, it is apparent that $x_3$ and $x_4$ do not affect $y$ - the coefficients $w_3$ and $w_4$ are close to zero."
      ],
      "id": "ZDc7yFY7atJl"
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "hunCJl5fatJl",
        "outputId": "6849b644-cee3-4194-8e73-13c8c2e00bcb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficient list:  [ 5.16766416  5.11867538  0.110636   -0.05773695]\n",
            "Intercept:  0.895382203287489\n"
          ]
        }
      ],
      "source": [
        "reg_demo = LinearRegression().fit(x, y)\n",
        "print(\"Coefficient list: \", reg_demo.coef_)\n",
        "print(\"Intercept: \" , reg_demo.intercept_)"
      ],
      "id": "hunCJl5fatJl"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XwISJEceatJl"
      },
      "source": [
        "What if we have many more uninformative features, though, and lots of noise relative to the true relationship?"
      ],
      "id": "XwISJEceatJl"
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "OQSf_sJgatJm"
      },
      "outputs": [],
      "source": [
        "n_samples = 100\n",
        "d = 95\n",
        "informative = 20\n",
        "coef = np.repeat(1,informative)\n",
        "sigma = 1\n",
        "intercept = 1"
      ],
      "id": "OQSf_sJgatJm"
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "8cDn-8wMatJm"
      },
      "outputs": [],
      "source": [
        "x_train, y_train = generate_linear_regression_data(n=n_samples, d=d, coef=coef, intercept=intercept, sigma=sigma, uninformative=d-informative)\n",
        "x_test, y_test = generate_linear_regression_data(n=n_samples, d=d, coef=coef, intercept=intercept, sigma=sigma, uninformative=d-informative)"
      ],
      "id": "8cDn-8wMatJm"
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "VugZgL7EatJm"
      },
      "outputs": [],
      "source": [
        "reg_all = LinearRegression().fit(x_train, y_train)"
      ],
      "id": "VugZgL7EatJm"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FArunsjCatJm"
      },
      "source": [
        "The following plot shows the coefficient value for each feature:"
      ],
      "id": "FArunsjCatJm"
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "nZ3Ss_dxatJm",
        "outputId": "8c8546c1-18d9-46e3-965d-08bf898af377",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 401
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(20,5))\n",
        "plt.stem(np.arange(0, d),reg_all.coef_, bottom=0);\n",
        "plt.xticks(np.arange(0, d, 1.0), rotation=90);"
      ],
      "id": "nZ3Ss_dxatJm"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kur7WV0watJm"
      },
      "source": [
        "We observe that the informative features don’t necessarily have coefficients with the largest magnitudes. The random “relationship” between an uninformative feature $x$ and $y$ appears, in some cases, as strong or stronger than the true relationship between an informative $x$ and $y$."
      ],
      "id": "kur7WV0watJm"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H1gg0WuvatJn"
      },
      "source": [
        "If we compute R2 on the training set, everything looks great:"
      ],
      "id": "H1gg0WuvatJn"
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "FRDY0rXpatJn"
      },
      "outputs": [],
      "source": [
        "y_hat = reg_all.predict(x_train)"
      ],
      "id": "FRDY0rXpatJn"
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "rdyyXxbmatJn",
        "outputId": "35e1189d-2c3f-46ee-f69a-ca9cb3535bdf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9921821930697265"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "metrics.r2_score(y_train, y_hat)"
      ],
      "id": "rdyyXxbmatJn"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sBpKHl6matJn"
      },
      "source": [
        "R2 is great!"
      ],
      "id": "sBpKHl6matJn"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IePzzfYvatJn"
      },
      "source": [
        "But what happens if we try to use our model to predict $y$ for some new, unseen data, from the same distribution?"
      ],
      "id": "IePzzfYvatJn"
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "1oFjyMwlatJo",
        "outputId": "2fb54e1e-f52a-4ab4-a615-93171541caa9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-4.2900349165495335"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "y_test_hat = reg_all.predict(x_test)\n",
        "metrics.r2_score(y_test, y_test_hat)"
      ],
      "id": "1oFjyMwlatJo"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NoFM-qLzatJo"
      },
      "source": [
        "That’s not good at all! Due to severe *over-fitting*, the model performs much worse on the test set than it did on the training set."
      ],
      "id": "NoFM-qLzatJo"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4SO2shpcatJo"
      },
      "source": [
        "Suppose that, to avoid overfitting, we decide to use only a subset of features. We don’t know a priori which features are the most informative. This problem is known as the *feature selection problem*.\n",
        "\n",
        "Perhaps we may decide to try adding one feature at a time to our model, in order, and measure the MSE.\n",
        "\n",
        "(Obviously, there are better ways to do feature selection! But for our demo, this will suffice.)"
      ],
      "id": "4SO2shpcatJo"
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "kbaOh482atJo"
      },
      "outputs": [],
      "source": [
        "dtest_list = np.arange(1,d)\n",
        "r2_tr = np.zeros(len(dtest_list))\n",
        "r2_test = np.zeros(len(dtest_list))\n",
        "\n",
        "column_order = np.random.permutation(x_train.shape[1])\n",
        "x_train_shuffle = x_train[:, column_order]\n",
        "x_test_shuffle  = x_test[:, column_order]\n",
        "\n",
        "\n",
        "for didx, dtest in enumerate(dtest_list):\n",
        "\n",
        "    # get data with the right number of features\n",
        "    x_train_dtest = x_train_shuffle[:, :dtest]\n",
        "    x_test_dtest = x_test_shuffle[:, :dtest]\n",
        "\n",
        "    # fit data\n",
        "    reg_dtest = LinearRegression().fit(x_train_dtest,y_train)\n",
        "\n",
        "    # measure R2 on training data\n",
        "    y_hat = reg_dtest.predict(x_train_dtest)\n",
        "    r2_tr[didx] = metrics.r2_score(y_train, y_hat)\n",
        "\n",
        "    # measure R2 on test data\n",
        "    y_hat_test = reg_dtest.predict(x_test_dtest)\n",
        "    r2_test[didx] = metrics.r2_score(y_test, y_hat_test)"
      ],
      "id": "kbaOh482atJo"
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "DGI0Bbq5atJo",
        "outputId": "ed293e18-6380-42b7-92c5-ccf4eb8ec41e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.lineplot(x=dtest_list,y=r2_tr, label=\"Training\");\n",
        "sns.lineplot(x=dtest_list,y=r2_test, label=\"Test\");\n",
        "plt.xlabel('Model order');\n",
        "plt.ylabel('R2');"
      ],
      "id": "DGI0Bbq5atJo"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U3sRZi-4atJp"
      },
      "source": [
        "As in the previous example, where the model performed better on the training set with higher $d$, we see again that adding complexity reduces the training error and increases R2 on the training data - but not on the test data."
      ],
      "id": "U3sRZi-4atJp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-3zSU6MoatJp"
      },
      "source": [
        "Bias and variance\n",
        "-----------------"
      ],
      "id": "-3zSU6MoatJp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aAfCKSnwatJp"
      },
      "source": [
        "Recall that we are trying to estimate some value $y$, which is related to $x$ by some “true” function, $t(x)$.\n",
        "\n",
        "In general, $t(x)$ is not known to us. We do, however, have some “noisy” samples of $y$, generated from\n",
        "\n",
        "$$y = t(x) + \\epsilon$$\n",
        "\n",
        "where $\\epsilon \\sim N(0, \\sigma^2)$.\n",
        "\n",
        "We use these training samples to “learn” a function $f(x,w)$ parameterized by $w$ such that for samples in the training set,\n",
        "\n",
        "$$y \\approx f(x,w)$$\n",
        "\n",
        "Our ultimate goal, however, is to learn the function that will best approximate samples that we have not yet seen, but that have also been generated from\n",
        "\n",
        "$$y = t(x) + \\epsilon$$"
      ],
      "id": "aAfCKSnwatJp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hLFypucHatJp"
      },
      "source": [
        "What might go wrong?"
      ],
      "id": "hLFypucHatJp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QJ9p3NxwatJp"
      },
      "source": [
        "### Bias\n",
        "\n",
        "We might try to learn a class of function that is simply not capable of expressing $t(x)$.\n",
        "\n",
        "We observed this in the polynomial example, when we tried learning\n",
        "\n",
        "$$t(x) = w_0 + w_1 x + w_2 x^2 + w_3 x^3$$\n",
        "\n",
        "using\n",
        "\n",
        "$$f(x,w) = w_0 + w_1 x$$\n",
        "\n",
        "(or any $d < 3$.)\n",
        "\n",
        "We also observed this in the example with many features, when we tried learning\n",
        "\n",
        "$$t(x) = w_0 + w_1 x_1 + \\ldots + w_{20} x_{20}$$\n",
        "\n",
        "using a smaller number of features, e.g.\n",
        "\n",
        "$$f(x,w) = w_0 + w_1 x_1 + \\ldots + w_{10} x_{10}$$"
      ],
      "id": "QJ9p3NxwatJp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fzj0ji8DatJp"
      },
      "source": [
        "### Variance\n",
        "\n",
        "We might learn the right class of function, but due to the stochastic noise in the training samples, and the random draw of training samples, our parameter estimates are different from the “true” values.\n",
        "\n",
        "We observed this in the polynomial example, when we tried learning\n",
        "\n",
        "$$t(x) = w_0 + w_1 x + w_2 x^2 + w_3 x^3$$\n",
        "\n",
        "using\n",
        "\n",
        "$$f(x,w) = w_0 + w_1 x + \\ldots + w_d x^d$$\n",
        "\n",
        "with $d \\geq 3$. The more complex polynomial *is* capable of expressing $t(x)$ - if we would learn exactly the correct coefficients for $w_i, 0 \\leq i \\leq 3$ and $w_i = 0$ for $i > 3$. But, we had some error in the coefficient estimates, because our coefficient estimates are tuned to the noise in the training data. The more coefficients we learn, the more potential for error.\n",
        "\n",
        "We also observed this in the example with many features, when we tried learning\n",
        "\n",
        "$$t(x) = w_0 + w_1 x_1 + \\ldots + w_{20} x_{20}$$\n",
        "\n",
        "using\n",
        "\n",
        "$$f(x,w) = w_0 + w_1 x_1 + \\ldots + w_d x_d$$\n",
        "\n",
        "with $d \\geq 20$. Again, the model with extra uninformative features is *capable* of expressing $t(x)$ - if we would learn exactly the correct coefficients for $w_i, 0 \\leq i \\leq 20$ and $w_i = 0$ for $i > 20$. But, we had some error in the coefficient estimates, because our coefficient estimates are tuned to the noise in the training data. The more coefficients we learn, the more potential for error."
      ],
      "id": "Fzj0ji8DatJp"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wXX5vi9TatJq"
      },
      "source": [
        "### Irreducible error\n",
        "\n",
        "Even if we learn exactly the right function, $f(x,w) = t(x)$, and we also learn the correct parameters, but still have error in our estimate of $y$ because of the stochastic “noise” in the data. We cannot “learn” $\\epsilon$, it is unpredictable."
      ],
      "id": "wXX5vi9TatJq"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CtEoNCEjatJq"
      },
      "source": [
        "### Decomposition of test MSE\n",
        "\n",
        "We know that the expected MSE on a new, unseen test point, can be decomposed into those three factors. Let us denote $E[f(x,w)]$ as $\\bar{f}(x,w)$, then\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "\\text{Test MSE} &= E [(y - \\hat{y})^2] \\\\\n",
        "&= E [(t(x) + \\epsilon - f(x,w))^2] \\\\\n",
        "&= E (\\epsilon)^2 + E [(t(x) - f(x,w))^2] \\\\\n",
        "&=  E (\\epsilon)^2 + E[t(x) - \\bar{f}(x,w)]^2 + E[(f(x,w) - \\bar{f}(x,w))^2] \\\\\n",
        "&= \\sigma^2 + \\text{Bias}^2 + \\text{Var}(f(x,w))\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "where the expectation is over the draw of the training set and the noise."
      ],
      "id": "CtEoNCEjatJq"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rXka7_QaatJq"
      },
      "source": [
        "-   The $\\sigma^2$ term captures the random noise in the data, which cannot be “learned”\n",
        "-   The $E[t(x) - \\bar{f}(x,w)]^2$ term captures any systematic difference between the function learned by our model and the true function, as will occur when the model cannot express the true function.\n",
        "-   The $E[(f(x,w) - \\bar{f}(x,w))^2]$ term captures the difference between the coefficient estimate due to a particular random training set, and the average coefficient estimate - in other words, the variance of the prediction over many fitted instances."
      ],
      "id": "rXka7_QaatJq"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7-kGp6nwatJq"
      },
      "source": [
        "### Bias and variance for linear regression"
      ],
      "id": "7-kGp6nwatJq"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F6PkYMxVatJq"
      },
      "source": [
        "We shall state here the following results, without proof, for a linear regression trained using least squares, with $n$ samples and having $d$ parameters. We also assume that $n \\geq d$ and the data matrix is full rank."
      ],
      "id": "F6PkYMxVatJq"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Aj4iDLBGatJq"
      },
      "source": [
        "**Bias**: If there is no under-modeling, then on average, the estimate of $y$ is unbiased, i.e.\n",
        "\n",
        "$$\\text{Bias}(f(x,w)) = 0$$"
      ],
      "id": "Aj4iDLBGatJq"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M2X3k9r1atJq"
      },
      "source": [
        "**Variance**: On average, the variance increases linearly with the number of parameters $d$ and inversely with the number of samples used for training $n$:\n",
        "\n",
        "$$\\text{Var}(f(x,w)) = \\frac{d}{n} \\sigma^2 $$\n",
        "\n",
        "where \\$ \\\\sigma^2\\$ is the stochastic noise variance."
      ],
      "id": "M2X3k9r1atJq"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M2qbgEnRatJr"
      },
      "source": [
        "Check your understanding with simulation\n",
        "----------------------------------------"
      ],
      "id": "M2qbgEnRatJr"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UWnPsg0matJr"
      },
      "source": [
        "For each of the following pairs of regression models, answer:\n",
        "\n",
        "-   Which model in each pair will have greater expected variance of its estimate of $y$?\n",
        "-   Which model in each pair will have greater bias?\n",
        "\n",
        "(Assume that the two models in each pair are identical except for the differences that are specified.)\n",
        "\n",
        "Then, we’ll check our answer with a simulation experiment, in which we:\n",
        "\n",
        "-   Draw a test set from the distribution of the data\n",
        "-   Many times:\n",
        "    -   Draw a training set from the distribution of the data\n",
        "    -   Fit each model on the training set\n",
        "    -   Compute error on the test set\n",
        "\n",
        "**Note**: we can’t do this when applying machine learning to a real problem with real data! Why not?\n",
        "\n",
        "**Note**: this procedure won’t give us the *exact* bias and variance of the model that we could compute using the closed form expression - why not?"
      ],
      "id": "UWnPsg0matJr"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jUneS-lDatJr"
      },
      "source": [
        "### Constant model vs mean"
      ],
      "id": "jUneS-lDatJr"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0tLQ7pRYatJs"
      },
      "source": [
        "Suppose that data is generated as\n",
        "\n",
        "$$y = 1 + \\epsilon$$\n",
        "\n",
        "where $\\epsilon \\sim N(0, \\sigma^2)$.\n",
        "\n",
        "We will consider two models:\n",
        "\n",
        "**Model A** is a constant model:\n",
        "\n",
        "$$\\hat{y} = 1$$\n",
        "\n",
        "**Model B** is the mean of the training samples.\n",
        "\n",
        "$$\\hat{y} = \\bar{y} = \\frac{1}{n} \\sum_{i=1}^n y_i $$"
      ],
      "id": "0tLQ7pRYatJs"
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "RaPKUiB2atJs"
      },
      "outputs": [],
      "source": [
        "n_repeat = 1000\n",
        "n_test = 50\n",
        "n_train = 5\n",
        "sigma = 1"
      ],
      "id": "RaPKUiB2atJs"
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "-XZGLwW0atJs"
      },
      "outputs": [],
      "source": [
        "# generate test data once\n",
        "x_test = np.random.uniform(-1, 1, size=(n_test, 1))\n",
        "y_test = np.ones(n_test) + sigma*np.random.randn(n_test)\n",
        "y_test_no_noise = np.ones(n_test)"
      ],
      "id": "-XZGLwW0atJs"
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "2YvrUhVXatJs"
      },
      "outputs": [],
      "source": [
        "# prepare some matrices for storing simulation results\n",
        "y_predict = np.zeros((n_test, n_repeat, 2))\n",
        "\n",
        "y_test_err = np.zeros((n_test, n_repeat, 2))\n",
        "y_test_bias = np.zeros((n_test, 2))"
      ],
      "id": "2YvrUhVXatJs"
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "G7CtFTcQatJt"
      },
      "outputs": [],
      "source": [
        "# now simulate training the model many times, on different training data every time\n",
        "# and evaluate using the test data\n",
        "for i in range(n_repeat):\n",
        "\n",
        "  # train both models on newly generated training data\n",
        "  # note: we don't need X data since y is independent of X\n",
        "  y_train = np.ones(n_train) + sigma*np.random.randn(n_train)\n",
        "\n",
        "  # model A: predict constant always\n",
        "  y_predict[:, i, 0] = np.repeat(1, n_test)\n",
        "  # model B: predict mean of training samples\n",
        "  y_predict[:, i, 1] = np.mean(y_train)\n",
        "\n",
        "  # overall squared error is due to difference between f_t(x) + epsilon, model prediction f(x,w)\n",
        "  y_test_err[:, i, 0] = (y_test - y_predict[:, i, 0])**2\n",
        "  y_test_err[:, i, 1] = (y_test - y_predict[:, i, 1])**2"
      ],
      "id": "G7CtFTcQatJt"
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "id": "9UntP_4EatJt"
      },
      "outputs": [],
      "source": [
        "# bias is due to difference between f_t(x) and mean of model prediction f(x,w)\n",
        "y_test_bias[:, 0] = (y_test_no_noise - y_predict[:, :, 0].mean(axis=1))**2\n",
        "y_test_bias[:, 1] = (y_test_no_noise - y_predict[:, :, 1].mean(axis=1))**2"
      ],
      "id": "9UntP_4EatJt"
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "mq-kZqStatJt"
      },
      "outputs": [],
      "source": [
        "# irreducible error is due to the difference between f_t(x) and f_t(x) + epsilon\n",
        "y_test_noise_var = (y_test_no_noise - y_test)**2"
      ],
      "id": "mq-kZqStatJt"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uwD7Fg1CatJu",
        "outputId": "4113b673-8088-4f80-fc47-586f23119607",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Creating legend with loc=\"best\" can be slow with large amounts of data.\n",
            "  fig.canvas.print_figure(bytes_io, **kw)\n"
          ]
        }
      ],
      "source": [
        "p = plt.figure(figsize=(10,10));\n",
        "\n",
        "models = ['Model A', 'Model B']\n",
        "\n",
        "for midx, model in enumerate(models):\n",
        "  p = plt.subplot(2, 2, midx+1);\n",
        "  for i in range(n_repeat):\n",
        "    p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, i, midx], alpha=0.05, color='orange');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].mean(axis=1), color='red', label='Mean of models');\n",
        "  p = sns.scatterplot(x=x_test[0:50].squeeze(), y=y_test[0:50], label='Test data');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('y');\n",
        "  p = plt.title(model);\n",
        "  p = plt.ylim(y_test.min()*1.1, y_test.max()*1.1)\n",
        "\n",
        "  p = plt.subplot(2, 2, midx+3);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_err[:, :, midx].mean(axis=1), color='red', alpha=0.5, label='Total squared error', markers=True);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_bias[:, midx], color='cyan', alpha=0.5, label='Bias^2');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].var(axis=1), color='green', alpha=0.5, label='Variance');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_noise_var, color='purple', alpha=0.2, label='Irreducible error');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('Error');\n",
        "  p = plt.title(\"MSE: %f \\n Irreducible error: %f \\n Bias^2: %f \\n Variance: %f \" %\n",
        "                (y_test_err[:,:,midx].mean(axis=(0,1)),\n",
        "                 y_test_noise_var.mean(),\n",
        "                 (y_test_bias[:, midx]).mean(),\n",
        "                  y_predict[:, :, midx].var(axis=1).mean() ) )\n",
        "  p = plt.ylim(0, 1.1* y_test_err[:, :, :].mean(axis=(1)).max() )\n",
        "\n",
        "plt.subplots_adjust(hspace=0.5)"
      ],
      "id": "uwD7Fg1CatJu"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G7hTN4FQatJu"
      },
      "source": [
        "Question:\n",
        "\n",
        "-   Are the specific values of bias and variance consistent with our expectations?\n",
        "-   What would happen if \\$\\\\sigma = 0 \\$?\n",
        "-   What would happen if we used $\\hat{y} = 2$ for the constant model?\n",
        "-   What would happen if we would use $\\hat{y} = \\bar{y} + 2$ instead of $\\bar{y}$ for the mean model?"
      ],
      "id": "G7hTN4FQatJu"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dRfMepG8atJu"
      },
      "source": [
        "### Mean vs. linear model with d=1"
      ],
      "id": "dRfMepG8atJu"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ILOVjnhRatJv"
      },
      "source": [
        "Suppose that data is generated as\n",
        "\n",
        "$$y = 1 + \\epsilon$$\n",
        "\n",
        "where $\\epsilon \\sim N(0, \\sigma^2)$.\n",
        "\n",
        "We will consider two models:\n",
        "\n",
        "**Model A** is a linear model with $d=1$ (using an uninformative feature, since $y$ is not a function of any $x$), trained using least squares:\n",
        "\n",
        "$$\\hat{y} = w_0 + w_1 x$$\n",
        "\n",
        "**Model B** is the mean of the training samples.\n",
        "\n",
        "$$\\hat{y} = \\bar{y} = \\frac{1}{n} \\sum_{i=1}^n y_i $$"
      ],
      "id": "ILOVjnhRatJv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "P4sG7KOUatJv"
      },
      "outputs": [],
      "source": [
        "n_repeat = 1000\n",
        "n_test = 50\n",
        "n_train = 5\n",
        "sigma = 1"
      ],
      "id": "P4sG7KOUatJv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2AA1gE9JatJv"
      },
      "outputs": [],
      "source": [
        "# generate test data once\n",
        "x_test = np.random.uniform(-1, 1, size=(n_test, 1))\n",
        "y_test = np.ones(n_test) + sigma*np.random.randn(n_test)\n",
        "y_test_no_noise = np.ones(n_test)"
      ],
      "id": "2AA1gE9JatJv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "B5uF94DdatJv"
      },
      "outputs": [],
      "source": [
        "# prepare some matrices for storing simulation results\n",
        "y_predict = np.zeros((n_test, n_repeat, 2))\n",
        "\n",
        "y_test_err = np.zeros((n_test, n_repeat, 2))\n",
        "y_test_bias = np.zeros((n_test, 2))"
      ],
      "id": "B5uF94DdatJv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aDveub9qatJv"
      },
      "outputs": [],
      "source": [
        "# now simulate training the model many times, on different training data every time\n",
        "# and evaluate using the test data\n",
        "for i in range(n_repeat):\n",
        "\n",
        "  # train both models on newly generated training data\n",
        "  y_train = np.ones(n_train) + sigma*np.random.randn(n_train)\n",
        "  x_train = np.random.uniform(-1,1, size=(n_train, 1))\n",
        "\n",
        "  # model A: fit linear model\n",
        "  reg_a = LinearRegression().fit(x_train, y_train)\n",
        "  y_predict[:, i, 0] = reg_a.predict(x_test)\n",
        "  # model B: predict mean of training samples\n",
        "  y_predict[:, i, 1] = np.mean(y_train)\n",
        "\n",
        "  # overall squared error is due to difference between f_t(x) + epsilon, model prediction f(x,w)\n",
        "  y_test_err[:, i, 0] = (y_test - y_predict[:, i, 0])**2\n",
        "  y_test_err[:, i, 1] = (y_test - y_predict[:, i, 1])**2"
      ],
      "id": "aDveub9qatJv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xSuoOBToatJv"
      },
      "outputs": [],
      "source": [
        "# bias is due to difference between f_t(x) and mean of model prediction f(x,w)\n",
        "y_test_bias[:, 0] = (y_test_no_noise - y_predict[:, :, 0].mean(axis=1))**2\n",
        "y_test_bias[:, 1] = (y_test_no_noise - y_predict[:, :, 1].mean(axis=1))**2"
      ],
      "id": "xSuoOBToatJv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SLeZoLoOatJv"
      },
      "outputs": [],
      "source": [
        "# irreducible error is due to the difference between f_t(x) and f_t(x) + epsilon\n",
        "y_test_noise_var = (y_test_no_noise - y_test)**2"
      ],
      "id": "SLeZoLoOatJv"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "FfZshD49atJv"
      },
      "outputs": [],
      "source": [
        "p = plt.figure(figsize=(10,10));\n",
        "\n",
        "models = ['Model A', 'Model B']\n",
        "\n",
        "for midx, model in enumerate(models):\n",
        "  p = plt.subplot(2, 2, midx+1);\n",
        "  for i in range(n_repeat):\n",
        "    p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, i, midx], alpha=0.05, color='orange');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].mean(axis=1), color='red', label='Mean of models');\n",
        "  p = sns.scatterplot(x=x_test[0:50].squeeze(), y=y_test[0:50], label='Test data');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('y');\n",
        "  p = plt.title(model);\n",
        "  p = plt.ylim(y_test.min()*1.1, y_test.max()*1.1)\n",
        "\n",
        "  p = plt.subplot(2, 2, midx+3);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_err[:, :, midx].mean(axis=1), color='red', alpha=0.5, label='Total squared error', markers=True);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_bias[:, midx], color='cyan', alpha=0.5, label='Bias^2');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].var(axis=1), color='green', alpha=0.5, label='Variance');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_noise_var, color='purple', alpha=0.2, label='Irreducible error');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('Error');\n",
        "  p = plt.title(\"MSE: %f \\n Irreducible error: %f \\n Bias^2: %f \\n Variance: %f \" %\n",
        "                (y_test_err[:,:,midx].mean(axis=(0,1)),\n",
        "                 y_test_noise_var.mean(),\n",
        "                 (y_test_bias[:, midx]).mean(),\n",
        "                  y_predict[:, :, midx].var(axis=1).mean() ) )\n",
        "  p = plt.ylim(0, 1.1* y_test_err[:, :, :].mean(axis=(1)).max() )\n",
        "\n",
        "plt.subplots_adjust(hspace=0.5)"
      ],
      "id": "FfZshD49atJv"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f7MLL50fatJw"
      },
      "source": [
        "### Linear model with 10 vs. 1000 training samples"
      ],
      "id": "f7MLL50fatJw"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KTOqu04yatJw"
      },
      "source": [
        "**Model A**:\n",
        "\n",
        "$$\\hat{y} = w_0 + w_1 x_1$$\n",
        "\n",
        "with least squares estimate of parameters, $n = 10$ training samples.\n",
        "\n",
        "**Model B**:\n",
        "\n",
        "$$\\hat{y} = w_0 + w_1 x_1$$\n",
        "\n",
        "with least squares estimate of parameters, $n = 1000$ training samples."
      ],
      "id": "KTOqu04yatJw"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y_9gO5BnatJw"
      },
      "outputs": [],
      "source": [
        "n_repeat = 1000\n",
        "n_test = 50"
      ],
      "id": "Y_9gO5BnatJw"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OloixvaNatJw"
      },
      "outputs": [],
      "source": [
        "y_predict = np.zeros((n_test, n_repeat, 2))\n",
        "\n",
        "y_test_err = np.zeros((n_test, n_repeat, 2))\n",
        "y_test_bias = np.zeros((n_test, 2))"
      ],
      "id": "OloixvaNatJw"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "i3wkPtrxatJw"
      },
      "outputs": [],
      "source": [
        "coef = [5]\n",
        "intercept = 1\n",
        "sigma = 2"
      ],
      "id": "i3wkPtrxatJw"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-WAf0a8watJw"
      },
      "outputs": [],
      "source": [
        "# generate test data once\n",
        "x_test, y_test = generate_linear_regression_data(n=n_test, d=1, coef=[5], intercept=1, sigma=sigma)\n",
        "y_test_no_noise = intercept + np.dot(x_test, coef)\n",
        "# note: y_test is f_t(x) + epsilon\n",
        "# note: y_test_no_noise is f_t(x)\n",
        "\n",
        "# noise is due to the difference between f_t(x) and f_t(x) + epsilon\n",
        "y_test_noise_var = (y_test_no_noise - y_test)**2"
      ],
      "id": "-WAf0a8watJw"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ia_6vHMratJx"
      },
      "outputs": [],
      "source": [
        "# now simulate training the model many times, on different training data every time\n",
        "# and evaluate using the test data\n",
        "for i in range(n_repeat):\n",
        "\n",
        "  # train both models on newly generated training data\n",
        "  x, y = generate_linear_regression_data(n=1000, d=1, coef=coef, intercept=intercept, sigma=sigma)\n",
        "  x_a, y_a = x[0:10], y[0:10]\n",
        "  reg_a = LinearRegression().fit(x_a, y_a)\n",
        "\n",
        "  x_b, y_b = x, y\n",
        "  reg_b = LinearRegression().fit(x_b, y_b)\n",
        "\n",
        "  y_predict[:, i, 0] = reg_a.predict(x_test)\n",
        "  y_predict[:, i, 1] = reg_b.predict(x_test)\n",
        "\n",
        "  # overall squared error is due to difference between f_t(x) + epsilon, model prediction f(x,w)\n",
        "  y_test_err[:, i, 0] = (y_test - y_predict[:, i, 0])**2\n",
        "  y_test_err[:, i, 1] = (y_test - y_predict[:, i, 1])**2"
      ],
      "id": "Ia_6vHMratJx"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kd1fA1fIatJx"
      },
      "outputs": [],
      "source": [
        "# bias is due to difference between f_t(x) and mean of model prediction f(x,w)\n",
        "y_test_bias[:, 0] = (y_test_no_noise - y_predict[:, :, 0].mean(axis=1))**2\n",
        "y_test_bias[:, 1] = (y_test_no_noise - y_predict[:, :, 1].mean(axis=1))**2"
      ],
      "id": "kd1fA1fIatJx"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dmk6KuycatJx"
      },
      "outputs": [],
      "source": [
        "p = plt.figure(figsize=(10,10));\n",
        "\n",
        "models = ['Model A', 'Model B']\n",
        "\n",
        "for midx, model in enumerate(models):\n",
        "  p = plt.subplot(2, 2, midx+1);\n",
        "  for i in range(n_repeat):\n",
        "    p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, i, midx], alpha=0.05, color='orange');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].mean(axis=1), color='red', label='Mean of models');\n",
        "  p = sns.scatterplot(x=x_test.squeeze(), y=y_test, label='Test data');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('y');\n",
        "  p = plt.title(model);\n",
        "  p = plt.ylim(y_test.min()*1.1, y_test.max()*1.1)\n",
        "\n",
        "  p = plt.subplot(2, 2, midx+3);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_err[:, :, midx].mean(axis=1), color='red', alpha=0.5, label='Total squared error', markers=True);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_bias[:, midx], color='cyan', alpha=0.5, label='Bias^2');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].var(axis=1), color='green', alpha=0.5, label='Variance');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_noise_var, color='purple', alpha=0.2, label='Irreducible error');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('Error');\n",
        "  p = plt.title(\"MSE: %f \\n Irreducible error: %f \\n Bias^2: %f \\n Variance: %f \" %\n",
        "                (y_test_err[:,:,midx].mean(axis=(0,1)),\n",
        "                 y_test_noise_var.mean(),\n",
        "                 (y_test_bias[:, midx]).mean(),\n",
        "                  y_predict[:, :, midx].var(axis=1).mean() ) )\n",
        "  p = plt.ylim(0, 1.1* y_test_err[:, :, :].mean(axis=(1)).max() )\n",
        "\n",
        "plt.subplots_adjust(hspace=0.5)"
      ],
      "id": "dmk6KuycatJx"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y2Prf08EatJx"
      },
      "outputs": [],
      "source": [],
      "id": "Y2Prf08EatJx"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XbOk_JlBatJx"
      },
      "source": [
        "### Linear vs. polynomial model"
      ],
      "id": "XbOk_JlBatJx"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eGSkPdg9atJx"
      },
      "source": [
        "Data is generated as $y_i = 1 + 0.5x_i + 2x_i^3 + \\epsilon_i$.\n",
        "\n",
        "**Model A**:\n",
        "\n",
        "$$\\hat{y} = w_0 + w_1 x$$\n",
        "\n",
        "with least squares estimate of parameters.\n",
        "\n",
        "**Model B**:\n",
        "\n",
        "$$\\hat{y} = w_0 + w_1 x + w_2 x^2 + w_3 x^3$$\n",
        "\n",
        "with least squares estimate of parameters."
      ],
      "id": "eGSkPdg9atJx"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g4EGXvOiatJx"
      },
      "outputs": [],
      "source": [
        "n_repeat = 1000\n",
        "n_test = 50"
      ],
      "id": "g4EGXvOiatJx"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gM_Ny7ciatJx"
      },
      "outputs": [],
      "source": [
        "y_predict = np.zeros((n_test, n_repeat, 2))\n",
        "\n",
        "y_test_err = np.zeros((n_test, n_repeat, 2))\n",
        "y_test_bias = np.zeros((n_test, 2))"
      ],
      "id": "gM_Ny7ciatJx"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J5rYogyratJy"
      },
      "outputs": [],
      "source": [
        "coefs=[1,0.5,0,2]\n",
        "sigma = 3"
      ],
      "id": "J5rYogyratJy"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zm_9X8RTatJy"
      },
      "outputs": [],
      "source": [
        "# generate test data once\n",
        "x_test, y_test = generate_polynomial_regression_data(n=n_test, coefs=coefs, sigma=sigma)\n",
        "y_test_no_noise = np.polynomial.polynomial.polyval(x_test, coefs).squeeze()\n",
        "# note: y_test is f_t(x) + epsilon\n",
        "# note: y_test_no_noise is f_t(x)\n",
        "\n",
        "# noise is due to the difference between f_t(x) and f_t(x) + epsilon\n",
        "y_test_noise_var = (y_test_no_noise - y_test)**2"
      ],
      "id": "zm_9X8RTatJy"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DYAevUBXatJy"
      },
      "outputs": [],
      "source": [
        "# now simulate training the model many times, on different training data every time\n",
        "# and evaluate using the test data\n",
        "for i in range(n_repeat):\n",
        "\n",
        "  # train both models on newly generated training data\n",
        "  x, y = generate_polynomial_regression_data(n=100, coefs=coefs, sigma=sigma)\n",
        "\n",
        "  x_a, y_a = x, y\n",
        "  reg_a = LinearRegression().fit(x_a, y_a)\n",
        "\n",
        "  x_b_d3 = np.column_stack( [x.reshape(-1,1)**d for d in np.arange(1,4)])\n",
        "  y_b = y\n",
        "  reg_b = LinearRegression().fit(x_b_d3, y_b)\n",
        "\n",
        "  y_predict[:, i, 0] = reg_a.predict(x_test)\n",
        "  x_test_d3 = np.column_stack( [x_test.reshape(-1,1)**d for d in np.arange(1,4)])\n",
        "  y_predict[:, i, 1] = reg_b.predict(x_test_d3)\n",
        "\n",
        "  # overall squared error is due to difference between f_t(x) + epsilon, model prediction f(x,w)\n",
        "  y_test_err[:, i, 0] = (y_test - y_predict[:, i, 0])**2\n",
        "  y_test_err[:, i, 1] = (y_test - y_predict[:, i, 1])**2"
      ],
      "id": "DYAevUBXatJy"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ePeCy3iHatJy"
      },
      "outputs": [],
      "source": [
        "# bias is due to difference between f_t(x) and mean of model prediction f(x,w)\n",
        "y_test_bias[:, 0] = (y_test_no_noise - y_predict[:, :, 0].mean(axis=1))**2\n",
        "y_test_bias[:, 1] = (y_test_no_noise - y_predict[:, :, 1].mean(axis=1))**2"
      ],
      "id": "ePeCy3iHatJy"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1zSEK_BpatJy"
      },
      "outputs": [],
      "source": [
        "p = plt.figure(figsize=(10,10));\n",
        "\n",
        "models = ['Model A', 'Model B']\n",
        "\n",
        "for midx, model in enumerate(models):\n",
        "  p = plt.subplot(2, 2, midx+1);\n",
        "  for i in range(n_repeat):\n",
        "    p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, i, midx], alpha=0.05, color='orange');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].mean(axis=1), color='red', label='Mean of models');\n",
        "  p = sns.scatterplot(x=x_test.squeeze(), y=y_test, label='Test data');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('y');\n",
        "  p = plt.title(model);\n",
        "  p = plt.ylim(y_test.min()*1.1, y_test.max()*1.1)\n",
        "\n",
        "  p = plt.subplot(2, 2, midx+3);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_err[:, :, midx].mean(axis=1), color='red', alpha=0.5, label='Total squared error', markers=True);\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_bias[:, midx], color='cyan', alpha=0.5, label='Bias^2');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_predict[:, :, midx].var(axis=1), color='green', alpha=0.5, label='Variance');\n",
        "  p = sns.lineplot(x=x_test.squeeze(), y=y_test_noise_var, color='purple', alpha=0.2, label='Irreducible error');\n",
        "  p = plt.xlabel('x');\n",
        "  p = plt.ylabel('Error');\n",
        "  p = plt.title(\"MSE: %f \\n Irreducible error: %f \\n Bias^2: %f \\n Variance: %f \" %\n",
        "                (y_test_err[:,:,midx].mean(axis=(0,1)),\n",
        "                 y_test_noise_var.mean(),\n",
        "                 (y_test_bias[:, midx]).mean(),\n",
        "                  y_predict[:, :, midx].var(axis=1).mean() ) )\n",
        "  p = plt.ylim(0, 1.1* y_test_err[:, :, :].mean(axis=(1)).max() )\n",
        "\n",
        "plt.subplots_adjust(hspace=0.5)"
      ],
      "id": "1zSEK_BpatJy"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tv_qW5pbatJz"
      },
      "source": [
        "Questions:\n",
        "\n",
        "-   What would happen if you increase or decrease $\\sigma$ in this example?\n",
        "\n",
        "Increasing σσ:\n",
        "\n",
        "    Test Data (ytestytest​):\n",
        "        The noise in the test data would increase, leading to more scattered test points.\n",
        "\n",
        "    Predictions (ypredictypredict​):\n",
        "        The variance of the model's predictions might increase because the models are trying to fit noisier data. This could lead to a less stable mean prediction curve.\n",
        "\n",
        "    Error Components:\n",
        "        Irreducible Error: The irreducible error (ytest_noise_varytest_noise_var​) would increase because it directly depends on the noise added to the data.\n",
        "        Total Squared Error (ytest_errytest_err​): The total squared error would increase due to the higher irreducible error.\n",
        "        Bias^2: The bias might remain largely unaffected, as it reflects the difference between the model's expected predictions and the true function (independent of noise).\n",
        "        Variance: The variance might increase because the predictions would fluctuate more when trained on noisier data.\n",
        "\n",
        "    Visualization:\n",
        "        Test points would appear more scattered.\n",
        "        Prediction intervals would become wider due to increased prediction variability.\n",
        "        Error components in the second subplot would show higher values, particularly for irreducible error and total squared error.\n",
        "\n",
        "Decreasing σσ:\n",
        "\n",
        "    Test Data (ytestytest​):\n",
        "        The noise in the test data would decrease, resulting in test points that are closer to the true underlying function.\n",
        "\n",
        "    Predictions (ypredictypredict​):\n",
        "        Predictions would likely become more stable and closer to the true function because the model has less noise to contend with.\n",
        "\n",
        "    Error Components:\n",
        "        Irreducible Error: The irreducible error (ytest_noise_varytest_noise_var​) would decrease due to reduced noise.\n",
        "        Total Squared Error (ytest_errytest_err​): The total squared error would decrease because of the lower irreducible error.\n",
        "        Bias^2: Bias would likely remain largely the same.\n",
        "        Variance: Variance might slightly decrease as predictions stabilize.\n",
        "\n",
        "    Visualization:\n",
        "        Test points would appear less scattered and closer to the true function.\n",
        "        Prediction intervals would narrow, reflecting reduced variability.\n",
        "        Error components in the second subplot would show lower values, particularly for irreducible error and total squared error.\n",
        "\n",
        "In summary:\n",
        "\n",
        "    Increasing σσ: Leads to noisier test data, higher errors, and more scattered predictions.\n",
        "    Decreasing σσ: Leads to cleaner test data, lower errors, and more stable predictions."
      ],
      "id": "Tv_qW5pbatJz"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W5Aw0FTJatJz"
      },
      "source": [
        "<!-- Double descent: https://colab.research.google.com/github/aslanides/aslanides.github.io/blob/master/colabs/2019-10-10-interpolation-regime.ipynb#scrollTo=nlaWee2cN7K7\n",
        "https://mlu-explain.github.io/double-descent/\n",
        "https://mlu-explain.github.io/double-descent2/\n",
        "-->"
      ],
      "id": "W5Aw0FTJatJz"
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}